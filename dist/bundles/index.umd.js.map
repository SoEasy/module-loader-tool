{"version":3,"file":"index.umd.js","sources":["../../src/interface.ts","../../src/errors.ts","../../src/manifest-processors.ts","../../src/module-loader-tool.ts"],"sourcesContent":["export enum ModuleLoadStrategy {\n  BLOCK = 'block',\n  IMMEDIATELY = 'immediately',\n  ON_DEMAND = 'on_demand',\n  LAZY = 'lazy'\n}\n\nexport interface IBaseModuleManifest {\n  name: string;\n  loadStrategy: ModuleLoadStrategy;\n  fileName: string;\n}\n\nexport interface IModuleLoaderEntrypoint<T extends IBaseModuleManifest> {\n  manifestUrl: string;\n  // tslint:disable-next-line\n  flattener?: (manifestObject: any) => Array<T>;\n}\n\nexport type ModuleDependencies = Record<string, object>;\nexport type ModuleUrlFormatter<T extends IBaseModuleManifest> = (manifest: T) => string;\n\nexport type CompiledModuleControls = {\n  start?: () => void;\n  getComponent?: () => React.ComponentClass\n};\n\nexport type CompiledModule = {\n  exports: {\n    controls: CompiledModuleControls,\n    [key: string]: object\n  }\n};\n\nexport type TypeMatcher<T> = (manifest: T) => boolean;\nexport type ModulePreprocessor<T> = (manifest: T) => Promise<void>;\nexport type ModulePostprocessor<T> = (manifest: T, module: CompiledModule) => Promise<void>;","export class NoDependencyError extends Error {}\n// tslint:disable-next-line\nexport class CompileModuleError extends Error {}\n// tslint:disable-next-line\nexport class CreationModuleError extends Error {}\n// tslint:disable-next-line\nexport class LoadBundleError extends Error {}\n// tslint:disable-next-line\nexport class PostprocessorError extends Error {}\n","import {\n  CompiledModule,\n  IBaseModuleManifest,\n  TypeMatcher,\n  ModulePreprocessor,\n  ModulePostprocessor\n} from './interface';\n\nexport class ManifestProcessors<TModuleManifest extends IBaseModuleManifest> {\n  private typeMatchers: Record<string, TypeMatcher<TModuleManifest>> = {};\n  private modulePreprocessors: Record<string, ModulePreprocessor<TModuleManifest>> = {};\n  private modulePostprocessors: Record<string, ModulePostprocessor<TModuleManifest>> = {};\n\n  private getModuleTypeByManifest(manifest: TModuleManifest): string | void {\n    for (const typeKey of Object.keys(this.typeMatchers)) {\n      const typeMatcher = this.typeMatchers[typeKey];\n      if (typeMatcher(manifest)) {\n        return typeKey;\n      }\n    }\n    console.warn(`Cant resolve type of service \"${manifest.name}\"`);\n    return;\n  }\n\n  registerManifestType(\n    type: string,\n    typeMatcher: TypeMatcher<TModuleManifest>,\n    modulePreprocessor?: ModulePreprocessor<TModuleManifest>,\n    modulePostprocessor?: ModulePostprocessor<TModuleManifest>\n  ): void {\n    this.typeMatchers[type] = typeMatcher;\n    if (modulePreprocessor) { this.modulePreprocessors[type] = modulePreprocessor; }\n    if (modulePostprocessor) { this.modulePostprocessors[type] = modulePostprocessor; }\n  }\n\n  runPreprocessor(manifest: TModuleManifest): Promise<void> {\n    const type = this.getModuleTypeByManifest(manifest);\n    if (!type) {\n      return Promise.resolve();\n    }\n\n    return this.modulePreprocessors[type] ? this.modulePreprocessors[type](manifest) : Promise.resolve();\n  }\n\n  runPostprocessor(manifest: TModuleManifest, module: CompiledModule): Promise<void> {\n    const type = this.getModuleTypeByManifest(manifest);\n    if (!type) {\n      return Promise.resolve();\n    }\n\n    return this.modulePostprocessors[type] ? this.modulePostprocessors[type](manifest, module) : Promise.resolve();\n  }\n}\n","import {\n  CompileModuleError, LoadBundleError,\n  NoDependencyError,\n  PostprocessorError\n} from './errors';\nimport {\n  CompiledModule,\n  IBaseModuleManifest,\n  IModuleLoaderEntrypoint,\n  ModuleDependencies,\n  ModuleLoadStrategy,\n  ModuleUrlFormatter\n} from './interface';\nimport { ManifestProcessors } from './manifest-processors';\n\nconst InvalidHttpStatusStart = 400;\n\nfunction fetchBundleSource(url: string): Promise<string> {\n  return fetch(url).then((response: Response) => {\n    if (response.status >= InvalidHttpStatusStart) {\n      throw new LoadBundleError(`Cant load bundle, http error ${response.status}`);\n    }\n\n    return response.text();\n  });\n}\n\nfunction compileSource(source: string, dependencies: ModuleDependencies): CompiledModule {\n  // @ts-ignore\n  // tslint:disable-next-line\n  const require = (name: string): any => {\n    const dependency = dependencies[name];\n    if (!dependency) {\n      // В любом случае кинуть ошибку. Может быть конечно, что микросервис просит зависимость,\n      // но не использует её и скомпилируется, однако лучше явно сообщить и по результатам:\n      // а) Выпилить зависимость из микросервиса\n      // б) Внести зависимость в ядро\n      // в) Вкомпилировать зависимость в микросервис\n      throw new NoDependencyError(`Dependency \"${name}\" does not provided by core application`);\n    }\n    return dependency;\n  };\n\n  const module = {\n    exports: {}\n  };\n  try {\n    // tslint:disable-next-line\n    eval(source);\n  } catch (ex) {\n    throw new CompileModuleError(`Cant compile module: ${ex.message}`);\n  }\n\n  return module as CompiledModule;\n}\n\nexport class ModuleLoaderTool<TModuleManifest extends IBaseModuleManifest> {\n  private dependencies: ModuleDependencies = {};\n  private urlFormatter: ModuleUrlFormatter<TModuleManifest>;\n  private entrypoint: IModuleLoaderEntrypoint<TModuleManifest>;\n\n  private manifestProcessors: ManifestProcessors<TModuleManifest> = new ManifestProcessors();\n  private _bundlesList: Array<TModuleManifest>;\n  private bundlesCache: Record<string, CompiledModule> = {};\n  private loadersCache: Record<string, Promise<CompiledModule | void>> = {};\n\n  get bundlesList(): Array<TModuleManifest> {\n    return this._bundlesList;\n  }\n\n  private startupCheck(): void {\n    if (!this.urlFormatter) {\n      throw new Error('urlFormatter is not defined');\n    }\n\n    if (!this.entrypoint) {\n      throw new Error('entrypoint is not defined');\n    }\n  }\n\n  private loadBulkBundles(filterFn: (manifest: TModuleManifest) => boolean): Promise<void> {\n    return Promise.all(\n      this.bundlesList.filter(\n        filterFn\n      ).map(\n        (manifest: TModuleManifest) => this.loadBundleByManifest(manifest)\n      )\n    ).then(\n      (compiledBundles: Array<CompiledModule | void>) => {\n        compiledBundles.forEach((compiledBundle: CompiledModule | void) => {\n          const controls = compiledBundle && compiledBundle.exports.controls;\n          if (controls && controls.start) {\n            controls.start();\n          }\n        });\n      }\n    );\n  }\n\n  defineDependencies(dependencies: ModuleDependencies): void {\n    this.dependencies = dependencies;\n  }\n\n  defineUrlFormatter(formatter: ModuleUrlFormatter<TModuleManifest>): void {\n    this.urlFormatter = formatter;\n  }\n\n  defineEntrypoint(entrypoint: IModuleLoaderEntrypoint<TModuleManifest>): void {\n    this.entrypoint = entrypoint;\n  }\n\n  defineManifestType(\n    type: string,\n    typeMatcher: (manifest: TModuleManifest) => boolean,\n    modulePreprocessor?: (manifest: TModuleManifest) => Promise<void>,\n    modulePostprocessor?: (manifest: TModuleManifest, module: CompiledModule) => Promise<void>\n  ): void {\n    this.manifestProcessors.registerManifestType(\n      type,\n      typeMatcher,\n      modulePreprocessor,\n      modulePostprocessor\n    );\n  }\n\n  isBundleLoaded(bundleName: string): boolean {\n    return !!this.bundlesCache[bundleName];\n  }\n\n  load(filterFn?: (m: TModuleManifest) => boolean): Promise<void> {\n    this.startupCheck();\n\n    return fetch(this.entrypoint.manifestUrl).then(\n      (response: Response) => response.text()\n    ).then(\n      (bundlesText: string) => JSON.parse(bundlesText)\n    ).then(\n      // tslint:disable-next-line\n      (bundlesObj: any) => {\n        const flattener = this.entrypoint.flattener;\n        const loadedBundles = flattener ? flattener(bundlesObj) : bundlesObj;\n\n        if (!filterFn) {\n          this._bundlesList = loadedBundles;\n          return;\n        }\n\n        this._bundlesList = loadedBundles.filter(filterFn);\n      }\n    ).then(\n      () => this.loadBulkBundles((manifest: TModuleManifest) => manifest.loadStrategy === ModuleLoadStrategy.BLOCK)\n    );\n  }\n\n  // tslint:disable-next-line\n  start(runner: (...args: Array<any>) => any): Promise<void> {\n    // Run and load immediately services in parallel\n    return Promise.resolve().then(\n      () => runner()\n    ).then(\n      () => this.loadBulkBundles(\n        (manifest: TModuleManifest) => manifest.loadStrategy === ModuleLoadStrategy.IMMEDIATELY\n      )\n    );\n  }\n\n  loadBundleByManifest(manifest: TModuleManifest): Promise<CompiledModule | void> {\n    if (this.bundlesCache[manifest.name]) {\n      return Promise.resolve(this.bundlesCache[manifest.name]);\n    }\n\n    if (this.loadersCache[manifest.name]) {\n      return this.loadersCache[manifest.name];\n    }\n\n    const serviceFileUrl = this.urlFormatter(manifest);\n\n    this.loadersCache[manifest.name] = this.manifestProcessors.runPreprocessor(manifest).then(\n      () => fetchBundleSource(serviceFileUrl)\n    ).then(\n      (source: string) => compileSource(source, this.dependencies)\n    ).then(\n      (compiledModule: CompiledModule) => {\n        this.bundlesCache[manifest.name] = compiledModule;\n\n        return this.manifestProcessors.runPostprocessor(manifest, compiledModule).then(\n          () => compiledModule\n        ).catch(\n          () => {\n            throw new PostprocessorError('Postprocessor crashed');\n          }\n        );\n      }\n    ).catch(\n      (error: NoDependencyError | CompileModuleError | PostprocessorError) => {\n        console.error(`Module: ${manifest.name}. Error: ${error.message}`);\n\n        return void 0;\n      }\n    );\n\n    return this.loadersCache[manifest.name];\n  }\n\n  loadBundleByName(name: string): Promise<CompiledModule | void> {\n    const manifest = this._bundlesList.find(\n      (m: TModuleManifest) => m.name === name\n    );\n    if (!manifest) {\n      throw new Error(`Module with name \"${name}\" is not declared`);\n    }\n\n    return this.loadBundleByManifest(manifest);\n  }\n}\n"],"names":["ModuleLoadStrategy","tslib_1.__extends"],"mappings":"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"}