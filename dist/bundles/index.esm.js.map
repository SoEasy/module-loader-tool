{"version":3,"file":"index.esm.js","sources":["../../src/interface.ts","../../src/errors.ts","../../src/manifest-processors.ts","../../src/module-loader-tool.ts"],"sourcesContent":["export enum ModuleLoadStrategy {\n  BLOCK = 'block',\n  IMMEDIATELY = 'immediately',\n  ON_DEMAND = 'on_demand',\n  LAZY = 'lazy'\n}\n\nexport interface IBaseModuleManifest {\n  name: string;\n  loadStrategy: ModuleLoadStrategy;\n  fileName: string;\n}\n\nexport interface IModuleLoaderEntrypoint<T extends IBaseModuleManifest> {\n  manifestUrl: string;\n  // tslint:disable-next-line\n  flattener?: (manifestObject: any) => Array<T>;\n}\n\nexport type ModuleDependencies = Record<string, object>;\nexport type ModuleUrlFormatter<T extends IBaseModuleManifest> = (manifest: T) => string;\n\nexport type CompiledModuleControls = {\n  start?: () => void;\n  getComponent?: () => React.ComponentClass\n};\n\nexport type CompiledModule = {\n  exports: {\n    controls: CompiledModuleControls,\n    [key: string]: object\n  }\n};\n\nexport type TypeMatcher<T> = (manifest: T) => boolean;\nexport type ModulePreprocessor<T> = (manifest: T) => Promise<void>;\nexport type ModulePostprocessor<T> = (manifest: T, module: CompiledModule) => Promise<void>;","export class NoDependencyError extends Error {}\n// tslint:disable-next-line\nexport class CompileModuleError extends Error {}\n// tslint:disable-next-line\nexport class CreationModuleError extends Error {}\n// tslint:disable-next-line\nexport class LoadBundleError extends Error {}\n// tslint:disable-next-line\nexport class PostprocessorError extends Error {}\n","import {\n  CompiledModule,\n  IBaseModuleManifest,\n  TypeMatcher,\n  ModulePreprocessor,\n  ModulePostprocessor\n} from './interface';\n\nexport class ManifestProcessors<TModuleManifest extends IBaseModuleManifest> {\n  private typeMatchers: Record<string, TypeMatcher<TModuleManifest>> = {};\n  private modulePreprocessors: Record<string, ModulePreprocessor<TModuleManifest>> = {};\n  private modulePostprocessors: Record<string, ModulePostprocessor<TModuleManifest>> = {};\n\n  private getModuleTypeByManifest(manifest: TModuleManifest): string | void {\n    for (const typeKey of Object.keys(this.typeMatchers)) {\n      const typeMatcher = this.typeMatchers[typeKey];\n      if (typeMatcher(manifest)) {\n        return typeKey;\n      }\n    }\n    console.warn(`Cant resolve type of service \"${manifest.name}\"`);\n    return;\n  }\n\n  registerManifestType(\n    type: string,\n    typeMatcher: TypeMatcher<TModuleManifest>,\n    modulePreprocessor?: ModulePreprocessor<TModuleManifest>,\n    modulePostprocessor?: ModulePostprocessor<TModuleManifest>\n  ): void {\n    this.typeMatchers[type] = typeMatcher;\n    if (modulePreprocessor) { this.modulePreprocessors[type] = modulePreprocessor; }\n    if (modulePostprocessor) { this.modulePostprocessors[type] = modulePostprocessor; }\n  }\n\n  runPreprocessor(manifest: TModuleManifest): Promise<void> {\n    const type = this.getModuleTypeByManifest(manifest);\n    if (!type) {\n      return Promise.resolve();\n    }\n\n    return this.modulePreprocessors[type] ? this.modulePreprocessors[type](manifest) : Promise.resolve();\n  }\n\n  runPostprocessor(manifest: TModuleManifest, module: CompiledModule): Promise<void> {\n    const type = this.getModuleTypeByManifest(manifest);\n    if (!type) {\n      return Promise.resolve();\n    }\n\n    return this.modulePostprocessors[type] ? this.modulePostprocessors[type](manifest, module) : Promise.resolve();\n  }\n}\n","import {\n  CompileModuleError, LoadBundleError,\n  NoDependencyError,\n  PostprocessorError\n} from './errors';\nimport {\n  CompiledModule,\n  IBaseModuleManifest,\n  IModuleLoaderEntrypoint,\n  ModuleDependencies,\n  ModuleLoadStrategy,\n  ModuleUrlFormatter\n} from './interface';\nimport { ManifestProcessors } from './manifest-processors';\n\nconst InvalidHttpStatusStart = 400;\n\nfunction fetchBundleSource(url: string): Promise<string> {\n  return fetch(url).then((response: Response) => {\n    if (response.status >= InvalidHttpStatusStart) {\n      throw new LoadBundleError(`Cant load bundle, http error ${response.status}`);\n    }\n\n    return response.text();\n  });\n}\n\nfunction compileSource(source: string, dependencies: ModuleDependencies): CompiledModule {\n  // @ts-ignore\n  // tslint:disable-next-line\n  const require = (name: string): any => {\n    const dependency = dependencies[name];\n    if (!dependency) {\n      // В любом случае кинуть ошибку. Может быть конечно, что микросервис просит зависимость,\n      // но не использует её и скомпилируется, однако лучше явно сообщить и по результатам:\n      // а) Выпилить зависимость из микросервиса\n      // б) Внести зависимость в ядро\n      // в) Вкомпилировать зависимость в микросервис\n      throw new NoDependencyError(`Dependency \"${name}\" does not provided by core application`);\n    }\n    return dependency;\n  };\n\n  const module = {\n    exports: {}\n  };\n  try {\n    // tslint:disable-next-line\n    eval(source);\n  } catch (ex) {\n    throw new CompileModuleError(`Cant compile module: ${ex.message}`);\n  }\n\n  return module as CompiledModule;\n}\n\nexport class ModuleLoaderTool<TModuleManifest extends IBaseModuleManifest> {\n  private dependencies: ModuleDependencies = {};\n  private urlFormatter: ModuleUrlFormatter<TModuleManifest>;\n  private entrypoint: IModuleLoaderEntrypoint<TModuleManifest>;\n\n  private manifestProcessors: ManifestProcessors<TModuleManifest> = new ManifestProcessors();\n  private _bundlesList: Array<TModuleManifest>;\n  private bundlesCache: Record<string, CompiledModule> = {};\n  private loadersCache: Record<string, Promise<CompiledModule | void>> = {};\n\n  get bundlesList(): Array<TModuleManifest> {\n    return this._bundlesList;\n  }\n\n  private startupCheck(): void {\n    if (!this.urlFormatter) {\n      throw new Error('urlFormatter is not defined');\n    }\n\n    if (!this.entrypoint) {\n      throw new Error('entrypoint is not defined');\n    }\n  }\n\n  private loadBulkBundles(filterFn: (manifest: TModuleManifest) => boolean): Promise<void> {\n    return Promise.all(\n      this.bundlesList.filter(\n        filterFn\n      ).map(\n        (manifest: TModuleManifest) => this.loadBundleByManifest(manifest)\n      )\n    ).then(\n      (compiledBundles: Array<CompiledModule | void>) => {\n        compiledBundles.forEach((compiledBundle: CompiledModule | void) => {\n          const controls = compiledBundle && compiledBundle.exports.controls;\n          if (controls && controls.start) {\n            controls.start();\n          }\n        });\n      }\n    );\n  }\n\n  defineDependencies(dependencies: ModuleDependencies): void {\n    this.dependencies = dependencies;\n  }\n\n  defineUrlFormatter(formatter: ModuleUrlFormatter<TModuleManifest>): void {\n    this.urlFormatter = formatter;\n  }\n\n  defineEntrypoint(entrypoint: IModuleLoaderEntrypoint<TModuleManifest>): void {\n    this.entrypoint = entrypoint;\n  }\n\n  defineManifestType(\n    type: string,\n    typeMatcher: (manifest: TModuleManifest) => boolean,\n    modulePreprocessor?: (manifest: TModuleManifest) => Promise<void>,\n    modulePostprocessor?: (manifest: TModuleManifest, module: CompiledModule) => Promise<void>\n  ): void {\n    this.manifestProcessors.registerManifestType(\n      type,\n      typeMatcher,\n      modulePreprocessor,\n      modulePostprocessor\n    );\n  }\n\n  isBundleLoaded(bundleName: string): boolean {\n    return !!this.bundlesCache[bundleName];\n  }\n\n  load(filterFn?: (m: TModuleManifest) => boolean): Promise<void> {\n    this.startupCheck();\n\n    return fetch(this.entrypoint.manifestUrl).then(\n      (response: Response) => response.text()\n    ).then(\n      (bundlesText: string) => JSON.parse(bundlesText)\n    ).then(\n      // tslint:disable-next-line\n      (bundlesObj: any) => {\n        const flattener = this.entrypoint.flattener;\n        const loadedBundles = flattener ? flattener(bundlesObj) : bundlesObj;\n\n        if (!filterFn) {\n          this._bundlesList = loadedBundles;\n          return;\n        }\n\n        this._bundlesList = loadedBundles.filter(filterFn);\n      }\n    ).then(\n      () => this.loadBulkBundles((manifest: TModuleManifest) => manifest.loadStrategy === ModuleLoadStrategy.BLOCK)\n    );\n  }\n\n  // tslint:disable-next-line\n  start(runner: (...args: Array<any>) => any): Promise<void> {\n    // Run and load immediately services in parallel\n    return Promise.resolve().then(\n      () => runner()\n    ).then(\n      () => this.loadBulkBundles(\n        (manifest: TModuleManifest) => manifest.loadStrategy === ModuleLoadStrategy.IMMEDIATELY\n      )\n    );\n  }\n\n  loadBundleByManifest(manifest: TModuleManifest): Promise<CompiledModule | void> {\n    if (this.bundlesCache[manifest.name]) {\n      return Promise.resolve(this.bundlesCache[manifest.name]);\n    }\n\n    if (this.loadersCache[manifest.name]) {\n      return this.loadersCache[manifest.name];\n    }\n\n    const serviceFileUrl = this.urlFormatter(manifest);\n\n    this.loadersCache[manifest.name] = this.manifestProcessors.runPreprocessor(manifest).then(\n      () => fetchBundleSource(serviceFileUrl)\n    ).then(\n      (source: string) => compileSource(source, this.dependencies)\n    ).then(\n      (compiledModule: CompiledModule) => {\n        this.bundlesCache[manifest.name] = compiledModule;\n\n        return this.manifestProcessors.runPostprocessor(manifest, compiledModule).then(\n          () => compiledModule\n        ).catch(\n          () => {\n            throw new PostprocessorError('Postprocessor crashed');\n          }\n        );\n      }\n    ).catch(\n      (error: NoDependencyError | CompileModuleError | PostprocessorError) => {\n        console.error(`Module: ${manifest.name}. Error: ${error.message}`);\n\n        return void 0;\n      }\n    );\n\n    return this.loadersCache[manifest.name];\n  }\n\n  loadBundleByName(name: string): Promise<CompiledModule | void> {\n    const manifest = this._bundlesList.find(\n      (m: TModuleManifest) => m.name === name\n    );\n    if (!manifest) {\n      throw new Error(`Module with name \"${name}\" is not declared`);\n    }\n\n    return this.loadBundleByManifest(manifest);\n  }\n}\n"],"names":[],"mappings":"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"}